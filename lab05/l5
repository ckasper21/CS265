Abstract Data Types
-------------------
Q1: 
i. List - a sequence of non-indexable elements, where consecutive elements are linked together with a pointer
ii. Stack - LIFO (Last in, first out) collection of elements. 
iii. Queue - FIFO (First in, first out) collection of elements.
iv. Dictionary (Map) - Structure that uses keys to map/find a specific value linked to that particular key.

Searching/Analysis
------------------
Q2: log2(n) times -> Binary search eliminates half the data at each step. Number of steps
is proportional to the number of times we can divide n by 2 till theres only one element.
Q3: n times -> Linear search is dependent on the array size, and at max will have to go through
all n elements to find the one we want
Q4: If the data is not sorted, only linear search can be used. If data is sorted and the user
knows what their looking for, linear may be better. An example of this is if theres an array of
numbers from 0 to 100, and the user wants to search for 3, it would take less time to do a linear search.

Sorting
-------
Q5:
0th Iteration: *84* 37 93 82 98 27 63 73 93 27 75 55 45 8
1st: *37* 8 82 45 27 63 73 55 27 75 [84] 93 98 93
2nd: *8* 27 27 [37] 45 63 73 55 82 75 [84] 93 98 93
3rd: [8] *27* 27 [37] 45 63 73 55 82 75 [84] 93 98 93
4th: [8] [27] 27 [37] *45* 63 73 55 82 75 [84] 93 98 93
5th: [8] [27] 27 [37] [45] *63* 73 55 82 75 [84] 93 98 93
6th: [8] [27] 27 [37] [45] 55 [63] *73* 82 75 [84] 93 98 93
7th: [8] [27] 27 [37] [45] 55 [63] [73] *82* 75 [84] 93 98 93
8th: [8] [27] 27 [37] [45] 55 [63] [73] 75 [82] [84] *93* 98 93
9th: [8] [27] 27 [37] [45] 55 [63] [73] 75 [82] [84] [93] *93* 98
10th: [8] [27] 27 [37] [45] 55 [63] [73] 75 [82] [84] [93] [93] 98

Pointers & References
---------------------
Q6: ["06","24","3"]
Q7: L=[13, [28, [24,None]]] | q=[24, [3,None]] 
Q8: In the first output, *s is a pointer to buffer. So when the s is being strcat'd on, buffer will also be. The second output fixes this by first establishing s as a pointer
to memory for its string, and then just copying over the contents of buffer. This is 
better for preserving the original string in buffer. 
Q9:
Hash Table
[3] -> ["Cos",86] -> ["Bob",38]
[4] -> ["Jaga",24] -> ["Kate",28] -> ["Nash",11] -> ["Vera",99]
[5] -> ["Jesse", 78]
Q10: find function for hash.c (and the table above)
int find( char *key, int *p_ans) 
{
	entry* ref;
	int h = hash(key);
	for (ref=table[h]; ref!=NULL; ref=ref->next)
	{
		if (strcmp(key, ref->key)==0)
		{
			*p_ans = ref->val;
			return 1;
		}
	}
	return 0;
}
